{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","question","setQuestion","message","setMessage","lastAttempt","setLastAttempt","asking","setAsking","tolvuord","setTolvurod","session","setSession","score","setScore","useEffect","fetch","then","res","json","sessionLength","questionObj","rightAnswer","Math","floor","random","length","answer1","answer2","questionLang","round","createQuestion","capitalize","s","charAt","toUpperCase","slice","answerQuestion","answer","isDefinition","_","findWhere","lang","definition","word","answers","array","i","j","shuffleArray","href","onClick","event","preventDefault","className","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f648777.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport _ from 'underscore';\nimport './style.css';\n\nconst sessionLength = 10;\n\nfunction App() {\n\tconst [question, setQuestion] = useState(null);\n\tconst [message, setMessage] = useState(null);\n\tconst [lastAttempt, setLastAttempt] = useState(null);\n\tconst [asking, setAsking] = useState(false);\n\tconst [initialized, setInitialized] = useState(false);\n\tconst [tolvuord, setTolvurod] = useState(null);\n\tconst [session, setSession] = useState(0);\n\tconst [score, setScore] = useState(0);\n\n\tuseEffect(() => {\n\t\tif (!tolvuord) {\n\t\t\tfetch('tolvuord.json').then((res) => res.json()).then((json) => {\n\t\t\t\tsetTolvurod(json);\n\t\t\t})\n\t\t}\n\t});\n\n\tlet shuffleArray = (array) => {\n\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t}\n\n\t\treturn array\n\t}\n\n\tlet createQuestion = () => {\n\t\tsetAsking(true);\n\t\tsetSession(session+1);\n\n\t\tlet questionObj = {\n\t\t\trightAnswer: tolvuord[Math.floor(Math.random() * tolvuord.length)],\n\n\t\t\tanswer1: tolvuord[Math.floor(Math.random() * tolvuord.length)],\n\t\t\tanswer2: tolvuord[Math.floor(Math.random() * tolvuord.length)],\n\n\t\t\tquestionLang: Math.round(Math.random())\n\t\t}\n\n\t\tsetQuestion(questionObj)\n\t};\n\n\tif (tolvuord && !asking && session <= sessionLength+1) {\n\t\tcreateQuestion();\n\t}\n\n\tlet capitalize = (s) => {\n\t\treturn s.charAt(0).toUpperCase()+s.slice(1);\n\t}\n\n\tlet answerQuestion = (answer) => {\n\t\tlet message;\n\n\t\tlet isDefinition = _.findWhere(question.rightAnswer, {lang: 'IS'}).definition;\n\n\t\tif (answer == question.rightAnswer[question.questionLang == 0 ? 1 : 0].word) {\n\t\t\tsetLastAttempt('rétt');\n\t\t\tsetMessage('<em>'+capitalize(question.rightAnswer[question.questionLang].word)+'</em> merkir <em>'+answer+'.</em>'+(isDefinition && isDefinition.length > 0 ? '<br/><small>Skilgreining: <i>'+isDefinition+'</i></small>' : ''));\n\t\t\tsetScore(score+1);\n\t\t}\n\t\telse {\n\t\t\tsetLastAttempt('vitlaust');\n\t\t\tsetMessage('<em>'+capitalize(question.rightAnswer[question.questionLang].word)+'</em> merkir <em>'+question.rightAnswer[question.questionLang == 0 ? 1 : 0].word+'.</em>'+(isDefinition && isDefinition.length > 0 ? '<br/><small>Skilgreining: <i>'+isDefinition+'</i></small>' : ''));\n\t\t}\n\n\t\tsetAsking(false);\n\t}\n\n\tlet answers = question ? shuffleArray([\n\t\t<div><a href=\"#\" onClick={(event) => {\n\t\t\tevent.preventDefault();\n\t\t\tanswerQuestion(question.rightAnswer[question.questionLang == 0 ? 1 : 0].word);\n\t\t}}>{question.rightAnswer[question.questionLang == 0 ? 1 : 0].word}</a></div>,\n\t\t<div><a href=\"#\" onClick={(event) => {\n\t\t\tevent.preventDefault();\n\t\t\tanswerQuestion(question.answer1[question.questionLang == 0 ? 1 : 0].word);\n\t\t}}>{question.answer1[question.questionLang == 0 ? 1 : 0].word}</a></div>,\n\t\t<div><a href=\"#\" onClick={(event) => {\n\t\t\tevent.preventDefault();\n\t\t\tanswerQuestion(question.answer2[question.questionLang == 0 ? 1 : 0].word);\n\t\t}}>{question.answer2[question.questionLang == 0 ? 1 : 0].word}</a></div>\n\t]) : [];\n\n\treturn (\n\t\t<div className=\"app\">\n\n\t\t\t<div className=\"session-wrapper\">\n\t\t\t\t<span className=\"current\">{session <= sessionLength ? session : sessionLength}</span><span className=\"slash\">/</span><span className=\"total\">{sessionLength}</span>\n\t\t\t</div>\n\n\t\t\t{\n\t\t\t\tmessage &&\n\t\t\t\t<div className={'message-wrapper'+(lastAttempt ? (lastAttempt == 'rétt' ? ' correct' : ' incorrect') : '')}>\n\t\t\t\t\t{\n\t\t\t\t\t\tlastAttempt &&\n\t\t\t\t\t\t<div className=\"heading\">{lastAttempt == 'rétt' ? 'Rétt' : 'Rangt'}</div>\n\t\t\t\t\t}\n\t\t\t\t\t<div className={'message'} dangerouslySetInnerHTML={{__html: message}} />\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t{\n\t\t\t\tquestion &&\n\t\t\t\t<div className=\"question-wrapper\">\n\t\t\t\t\t\t<div className={'results-wrapper'+(session == sessionLength+1 ? ' visible' : '')}>\n\t\t\t\t\t\t\t<div className=\"heading\">Þú náðir {score} réttum af {sessionLength}.</div>\n\t\t\t\t\t\t\t<a onClick={() => {\n\t\t\t\t\t\t\t\tsetScore(0);\n\t\t\t\t\t\t\t\tsetSession(1);\n\t\t\t\t\t\t\t}}>Byrja aftur</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"question\">Hvað þýðir <em>{question.rightAnswer[question.questionLang].word}</em>?</div>\n\n\t\t\t\t\t<div className=\"answers\">\n\t\t\t\t\t{\n\t\t\t\t\t\tanswers\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}